{"version":3,"file":"index.ie11.production.min.js","sources":["../src/utils/isHTMLElement.ts","../src/constants.ts","../src/utils/isNullOrUndefined.ts","../src/utils/isObject.ts","../src/utils/isKey.ts","../src/utils/compact.ts","../src/utils/stringToPath.ts","../src/utils/set.ts","../src/logic/transformToNestObject.ts","../src/utils/isUndefined.ts","../src/utils/get.ts","../src/logic/removeAllEventListeners.ts","../src/logic/getRadioValue.ts","../src/utils/isRadioInput.ts","../src/utils/isFileInput.ts","../src/utils/isCheckBoxInput.ts","../src/utils/isMultipleSelect.ts","../src/logic/getCheckboxValue.ts","../src/logic/getFieldValue.ts","../src/logic/getMultipleSelectValue.ts","../src/utils/isDetached.ts","../src/utils/isEmptyObject.ts","../src/utils/isBoolean.ts","../src/utils/unset.ts","../src/logic/findRemovedFieldAndRemoveListener.ts","../src/utils/isString.ts","../src/utils/isPrimitive.ts","../src/logic/getFieldsValues.ts","../src/utils/deepMerge.ts","../src/utils/deepEqual.ts","../src/utils/isRegex.ts","../src/logic/getValueAndMessage.ts","../src/utils/isFunction.ts","../src/utils/isMessage.ts","../src/logic/getValidateError.ts","../src/logic/appendErrors.ts","../src/logic/validateField.ts","../src/utils/getPath.ts","../src/logic/assignWatchFields.ts","../src/logic/skipValidation.ts","../src/logic/getFieldArrayParentName.ts","../src/logic/isNameInFieldArray.ts","../src/utils/cloneObject.ts","../src/utils/validationModeChecker.ts","../src/utils/isRadioOrCheckbox.ts","../src/useForm.ts","../src/useFormContext.tsx","../src/logic/generateId.ts","../src/utils/remove.ts","../src/utils/move.ts","../src/utils/swap.ts","../src/utils/prepend.ts","../src/utils/insert.ts","../src/utils/fillEmptyArray.ts","../src/utils/fillBooleanArray.ts","../src/useFieldArray.ts","../src/controller.tsx","../src/logic/getInputValue.ts","../src/logic/isErrorStateChanged.ts","../src/logic/setFieldArrayDirtyFields.ts","../src/logic/attachEventListeners.ts","../src/utils/isSelectInput.ts","../src/logic/focusOnErrorField.ts","../src/utils/onDomRemove.ts","../src/useWatch.ts"],"sourcesContent":["export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n  INPUT: 'input',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const VALUE = 'value';\n\nexport const SELECT = 'select';\n\nexport const UNDEFINED = 'undefined';\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default (value: unknown): value is null | undefined => value == null;\n","import isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !(value instanceof Date);\n","export default (value: [] | string) =>\n  !Array.isArray(value) &&\n  (/^\\w*$/.test(value) ||\n    !/\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/.test(value));\n","export default (value: any[]) => value.filter(Boolean);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(\n    input\n      .replace(/[\"|']/g, '')\n      .replace(/\\[/g, '.')\n      .replace(/\\]/g, '')\n      .split('.'),\n  );\n","import isObject from './isObject';\nimport isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport { FieldValues } from '../types';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import set from '../utils/set';\nimport isKey from '../utils/isKey';\nimport { FieldValues } from '../types';\n\nexport default (data: FieldValues, value: Record<string, any> = {}): any => {\n  for (const key in data) {\n    !isKey(key) ? set(value, key, data[key]) : (value[key] = data[key]);\n  }\n  return value;\n};\n","export default (val: unknown): val is undefined => val === undefined;\n","import isUndefined from './isUndefined';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport compact from './compact';\n\nexport default (obj: any, path: string, defaultValue?: unknown) => {\n  const result = compact(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n    obj,\n  );\n\n  return isUndefined(result) || result === obj\n    ? isUndefined(obj[path])\n      ? defaultValue\n      : obj[path]\n    : result;\n};\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Ref } from '../types';\n\nexport default (\n  ref: Ref,\n  validateWithStateUpdate: EventListenerOrEventListenerObject,\n): void => {\n  if (isHTMLElement(ref) && ref.removeEventListener) {\n    ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\n  }\n};\n","import { RadioOrCheckboxOption } from '../types';\n\ntype RadioFieldResult = {\n  isValid: boolean;\n  value: number | string;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: '',\n};\n\nexport default (options?: RadioOrCheckboxOption[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.ref.checked\n            ? {\n                isValid: true,\n                value: option.ref.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","import { FieldElement } from '../types';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-multiple`;\n","import isUndefined from '../utils/isUndefined';\nimport { RadioOrCheckboxOption } from '../types';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: RadioOrCheckboxOption[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.ref.checked)\n        .map(({ ref: { value } }) => value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    const { checked, value, attributes } = options[0].ref;\n\n    return checked\n      ? attributes && !isUndefined((attributes as any).value)\n        ? isUndefined(value) || value === ''\n          ? validResult\n          : { value: value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport get from '../utils/get';\nimport isFileInput from '../utils/isFileInput';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport getCheckboxValue from './getCheckboxValue';\nimport { FieldRefs, FieldValues, InternalFieldName } from '../types';\n\nexport default function getFieldValue<TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  name: InternalFieldName<TFieldValues>,\n  shallowFieldsStateRef?: React.MutableRefObject<Partial<FieldValues>>,\n  excludeDisabled?: boolean,\n) {\n  const field = fieldsRef.current[name]!;\n\n  if (field) {\n    const {\n      ref: { value, disabled },\n      ref,\n    } = field;\n\n    if (disabled && excludeDisabled) {\n      return;\n    }\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return getRadioValue(field.options).value;\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBox(ref)) {\n      return getCheckboxValue(field.options).value;\n    }\n\n    return value;\n  }\n\n  if (shallowFieldsStateRef) {\n    return get(shallowFieldsStateRef.current, name);\n  }\n}\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","import { Ref } from '../types';\n\nexport default function isDetached(element: Ref): boolean {\n  if (!element) {\n    return true;\n  }\n\n  if (\n    !(element instanceof HTMLElement) ||\n    element.nodeType === Node.DOCUMENT_NODE\n  ) {\n    return false;\n  }\n\n  return isDetached(element.parentNode as Ref);\n}\n","import isObject from './isObject';\nimport { EmptyObject } from '../types';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport isEmptyObject from './isEmptyObject';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport isBoolean from './isBoolean';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const path = updatePath.slice(0, -1);\n  const length = path.length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef = undefined;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef = undefined;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import * as React from 'react';\nimport removeAllEventListeners from './removeAllEventListeners';\nimport getFieldValue from './getFieldValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport set from '../utils/set';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDetached from '../utils/isDetached';\nimport unset from '../utils/unset';\nimport compact from '../utils/compact';\nimport isUndefined from '../utils/isUndefined';\nimport { Field, FieldRefs, FieldValues, Ref } from '../types';\n\nconst isSameRef = (fieldValue: Field, ref: Ref) =>\n  fieldValue && fieldValue.ref === ref;\n\nexport default function findRemovedFieldAndRemoveListener<\n  TFieldValues extends FieldValues\n>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  handleChange: ({ type, target }: Event) => Promise<void | boolean>,\n  field: Field,\n  shallowFieldsStateRef: React.MutableRefObject<FieldValues>,\n  shouldUnregister?: boolean,\n  forceDelete?: boolean,\n): void {\n  const {\n    ref,\n    ref: { name, type },\n  } = field;\n  const fieldRef = fieldsRef.current[name] as Field;\n\n  if (!shouldUnregister) {\n    const value = getFieldValue(fieldsRef, name, shallowFieldsStateRef);\n\n    if (!isUndefined(value)) {\n      set(shallowFieldsStateRef.current, name, value);\n    }\n  }\n\n  if (!type) {\n    delete fieldsRef.current[name];\n    return;\n  }\n\n  if ((isRadioInput(ref) || isCheckBoxInput(ref)) && fieldRef) {\n    const { options } = fieldRef;\n\n    if (Array.isArray(options) && options.length) {\n      compact(options).forEach((option, index): void => {\n        const { ref } = option;\n        if ((ref && isDetached(ref) && isSameRef(option, ref)) || forceDelete) {\n          removeAllEventListeners(ref, handleChange);\n          unset(options, `[${index}]`);\n        }\n      });\n\n      if (options && !compact(options).length) {\n        delete fieldsRef.current[name];\n      }\n    } else {\n      delete fieldsRef.current[name];\n    }\n  } else if ((isDetached(ref) && isSameRef(fieldRef, ref)) || forceDelete) {\n    removeAllEventListeners(ref, handleChange);\n\n    delete fieldsRef.current[name];\n  }\n}\n","export default (value: unknown): value is string => typeof value === 'string';\n","import isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\nimport { Primitive } from '../types';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import * as React from 'react';\nimport getFieldValue from './getFieldValue';\nimport isString from '../utils/isString';\nimport { deepMerge } from '../utils/deepMerge';\nimport isUndefined from '../utils/isUndefined';\nimport { InternalFieldName, FieldValues, FieldRefs } from '../types';\nimport transformToNestObject from './transformToNestObject';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  shallowFieldsStateRef?: React.MutableRefObject<Record<string, any>>,\n  excludeDisabled?: boolean,\n  search?:\n    | InternalFieldName<TFieldValues>\n    | InternalFieldName<TFieldValues>[]\n    | { nest: boolean },\n) => {\n  const output = {} as TFieldValues;\n\n  for (const name in fieldsRef.current) {\n    if (\n      isUndefined(search) ||\n      (isString(search)\n        ? name.startsWith(search)\n        : Array.isArray(search) && search.find((data) => name.startsWith(data)))\n    ) {\n      output[name as InternalFieldName<TFieldValues>] = getFieldValue(\n        fieldsRef,\n        name,\n        undefined,\n        excludeDisabled,\n      );\n    }\n  }\n\n  return deepMerge(\n    transformToNestObject({ ...((shallowFieldsStateRef || {}).current || {}) }),\n    transformToNestObject(output),\n  );\n};\n","import isObject from './isObject';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] =\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (Array.isArray(targetValue) && Array.isArray(sourceValue))\n          ? deepMerge(targetValue, sourceValue)\n          : sourceValue;\n    } catch {}\n  }\n\n  return target;\n}\n","import isObject from '../utils/isObject';\n\nexport default function deepEqual(\n  object1: any = [],\n  object2: any = [],\n  isErrorObject?: boolean,\n) {\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    if (!(isErrorObject && ['ref', 'context'].includes(key))) {\n      const val1 = object1[key];\n      const val2 = object2[key];\n\n      if (\n        (isObject(val1) || Array.isArray(val1)) &&\n        (isObject(val2) || Array.isArray(val2))\n          ? !deepEqual(val1, val2, isErrorObject)\n          : val1 !== val2\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\nimport { ValidationRule, ValidationValueMessage } from '../types';\n\nconst isValueMessage = (\n  value?: ValidationRule,\n): value is ValidationValueMessage => isObject(value) && !isRegex(value);\n\nexport default (validationData?: ValidationRule) =>\n  isValueMessage(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import { isValidElement } from 'react';\nimport isString from '../utils/isString';\nimport isObject from '../utils/isObject';\nimport { Message } from '../types';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || (isObject(value) && isValidElement(value));\n","import isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport { FieldError, ValidateResult, Ref } from '../types';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (isMessage(result) || (isBoolean(result) && !result)) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import {\n  InternalFieldName,\n  ValidateResult,\n  InternalFieldErrors,\n} from '../types';\n\nexport default <TFieldValues>(\n  name: InternalFieldName<TFieldValues>,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors<TFieldValues>,\n  type: string,\n  message: ValidateResult,\n) => {\n  if (validateAllFieldCriteria) {\n    const error = errors[name];\n\n    return {\n      ...error,\n      types: {\n        ...(error && error.types ? error.types : {}),\n        [type]: message || true,\n      },\n    };\n  }\n\n  return {};\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getCheckboxValue from './getCheckboxValue';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isRadioInput from '../utils/isRadioInput';\nimport getValueAndMessage from './getValueAndMessage';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isString from '../utils/isString';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isObject from '../utils/isObject';\nimport isFunction from '../utils/isFunction';\nimport getFieldsValue from './getFieldValue';\nimport isRegex from '../utils/isRegex';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport getValidateError from './getValidateError';\nimport appendErrors from './appendErrors';\nimport { INPUT_VALIDATION_RULES } from '../constants';\nimport {\n  Field,\n  FieldValues,\n  FieldRefs,\n  Message,\n  FieldError,\n  InternalFieldName,\n  InternalFieldErrors,\n} from '../types';\n\nexport default async <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  validateAllFieldCriteria: boolean,\n  {\n    ref,\n    ref: { type, value },\n    options,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n  }: Field,\n  shallowFieldsStateRef: React.MutableRefObject<Record<string, any>>,\n): Promise<InternalFieldErrors<TFieldValues>> => {\n  const fields = fieldsRef.current;\n  const name: InternalFieldName<TFieldValues> = ref.name;\n  const error: InternalFieldErrors<TFieldValues> = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty = value === '';\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...(exceedMax\n        ? appendErrorsCurry(maxType, message)\n        : appendErrorsCurry(minType, message)),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value))) ||\n      (isBoolean(value) && !value) ||\n      (isCheckBox && !getCheckboxValue(options).isValid) ||\n      (isRadio && !getRadioValue(options).isValid))\n  ) {\n    const { value: requiredValue, message: requiredMessage } = isMessage(\n      required,\n    )\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (requiredValue) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message: requiredMessage,\n        ref: isRadioOrCheckbox\n          ? (((fields[name] as Field).options || [])[0] || {}).ref\n          : ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, requiredMessage),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (!isNullOrUndefined(min) || !isNullOrUndefined(max)) {\n    let exceedMax;\n    let exceedMin;\n    const { value: maxValue, message: maxMessage } = getValueAndMessage(max);\n    const { value: minValue, message: minMessage } = getValueAndMessage(min);\n\n    if (type === 'number' || (!type && !isNaN(value))) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(value);\n      if (!isNullOrUndefined(maxValue)) {\n        exceedMax = valueNumber > maxValue;\n      }\n      if (!isNullOrUndefined(minValue)) {\n        exceedMin = valueNumber < minValue;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(value);\n      if (isString(maxValue)) {\n        exceedMax = valueDate > new Date(maxValue);\n      }\n      if (isString(minValue)) {\n        exceedMin = valueDate < new Date(minValue);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxMessage,\n        minMessage,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(value) && !isEmpty && (maxLength || minLength)) {\n    const {\n      value: maxLengthValue,\n      message: maxLengthMessage,\n    } = getValueAndMessage(maxLength);\n    const {\n      value: minLengthValue,\n      message: minLengthMessage,\n    } = getValueAndMessage(minLength);\n    const inputLength = value.toString().length;\n    const exceedMax =\n      !isNullOrUndefined(maxLengthValue) && inputLength > maxLengthValue;\n    const exceedMin =\n      !isNullOrUndefined(minLengthValue) && inputLength < minLengthValue;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(!!exceedMax, maxLengthMessage, minLengthMessage);\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty) {\n    const { value: patternValue, message: patternMessage } = getValueAndMessage(\n      pattern,\n    );\n\n    if (isRegex(patternValue) && !patternValue.test(value)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message: patternMessage,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, patternMessage),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    const fieldValue = getFieldsValue(fieldsRef, name, shallowFieldsStateRef);\n    const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\n\n    if (isFunction(validate)) {\n      const result = await validate(fieldValue);\n      const validateError = getValidateError(result, validateRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n      for (const [key, validateFunction] of Object.entries(validate)) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateResult = await validateFunction(fieldValue);\n        const validateError = getValidateError(\n          validateResult,\n          validateRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: validateRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  return error;\n};\n","import isPrimitive from './isPrimitive';\nimport isObject from './isObject';\n\nexport const getPath = <T extends string, U extends object | unknown[]>(\n  path: T,\n  values: U,\n): string[] => {\n  const getInnerPath = <K>(key: K, value: U, isObject?: boolean) => {\n    const pathWithIndex = isObject ? `${path}.${key}` : `${path}[${key}]`;\n    return isPrimitive(value) ? pathWithIndex : getPath(pathWithIndex, value);\n  };\n\n  return Object.entries(values)\n    .map(([key, value]) => getInnerPath(key, value, isObject(values)))\n    .flat(Infinity) as string[];\n};\n","import get from '../utils/get';\nimport { getPath } from '../utils/getPath';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport {\n  DeepPartial,\n  FieldValue,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n} from '../types';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldValues: TFieldValues,\n  fieldName: InternalFieldName<TFieldValues>,\n  watchFields: Set<InternalFieldName<TFieldValues>>,\n  inputValue: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  isSingleField?: boolean,\n):\n  | FieldValue<TFieldValues>\n  | UnpackNestedValue<DeepPartial<TFieldValues>>\n  | undefined => {\n  let value;\n\n  watchFields.add(fieldName);\n\n  if (isEmptyObject(fieldValues)) {\n    value = undefined;\n  } else {\n    value = get(fieldValues, fieldName);\n\n    if (isObject(value) || Array.isArray(value)) {\n      getPath(fieldName, value).forEach((name) => watchFields.add(name));\n    }\n  }\n\n  return isUndefined(value)\n    ? isSingleField\n      ? inputValue\n      : get(inputValue, fieldName)\n    : value;\n};\n","export default ({\n  isOnBlur,\n  isOnChange,\n  isOnTouch,\n  isTouched,\n  isReValidateOnBlur,\n  isReValidateOnChange,\n  isBlurEvent,\n  isSubmitted,\n  isOnAll,\n}: {\n  isOnAll?: boolean;\n  isOnBlur?: boolean;\n  isOnChange?: boolean;\n  isReValidateOnBlur?: boolean;\n  isReValidateOnChange?: boolean;\n  isBlurEvent?: boolean;\n  isSubmitted?: boolean;\n  isOnTouch?: boolean;\n  isTouched?: boolean;\n}) => {\n  if (isOnAll) {\n    return false;\n  } else if (!isSubmitted && isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","export default (name: string) => name.substring(0, name.indexOf('['));\n","import { FieldValues, InternalFieldName } from '../types';\n\nexport const isMatchFieldArrayName = (name: string, searchName: string) =>\n  RegExp(\n    `^${searchName}[\\\\d+]`.replace(/\\[/g, '\\\\[').replace(/\\]/g, '\\\\]'),\n  ).test(name);\n\nexport default (\n  names: Set<InternalFieldName<FieldValues>>,\n  name: InternalFieldName<FieldValues>,\n) => [...names].some((current) => isMatchFieldArrayName(name, current));\n","import isObject from './isObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function cloneObject<T extends unknown>(object: T): T {\n  let copy: any;\n\n  if (isPrimitive(object)) {\n    return object;\n  }\n\n  if (object instanceof Date) {\n    copy = new Date(object.getTime());\n    return copy;\n  }\n\n  copy = Array.isArray(object) ? [] : {};\n\n  for (const key in object) {\n    copy[key] = isObject(object[key]) ? cloneObject(object[key]) : object[key];\n  }\n\n  return copy;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","import isRadioInput from './isRadioInput';\nimport isCheckBoxInput from './isCheckBoxInput';\nimport { FieldElement } from '../types';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","import * as React from 'react';\nimport attachEventListeners from './logic/attachEventListeners';\nimport transformToNestObject from './logic/transformToNestObject';\nimport focusOnErrorField from './logic/focusOnErrorField';\nimport findRemovedFieldAndRemoveListener from './logic/findRemovedFieldAndRemoveListener';\nimport setFieldArrayDirtyFields from './logic/setFieldArrayDirtyFields';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldValue from './logic/getFieldValue';\nimport isErrorStateChanged from './logic/isErrorStateChanged';\nimport validateField from './logic/validateField';\nimport assignWatchFields from './logic/assignWatchFields';\nimport skipValidation from './logic/skipValidation';\nimport getFieldArrayParentName from './logic/getFieldArrayParentName';\nimport deepEqual from './utils/deepEqual';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport isCheckBoxInput from './utils/isCheckBoxInput';\nimport isEmptyObject from './utils/isEmptyObject';\nimport isRadioInput from './utils/isRadioInput';\nimport isSelectInput from './utils/isSelectInput';\nimport isFileInput from './utils/isFileInput';\nimport onDomRemove from './utils/onDomRemove';\nimport isObject from './utils/isObject';\nimport { getPath } from './utils/getPath';\nimport isPrimitive from './utils/isPrimitive';\nimport isFunction from './utils/isFunction';\nimport isString from './utils/isString';\nimport isUndefined from './utils/isUndefined';\nimport get from './utils/get';\nimport set from './utils/set';\nimport unset from './utils/unset';\nimport isKey from './utils/isKey';\nimport cloneObject from './utils/cloneObject';\nimport modeChecker from './utils/validationModeChecker';\nimport isMultipleSelect from './utils/isMultipleSelect';\nimport compact from './utils/compact';\nimport isNullOrUndefined from './utils/isNullOrUndefined';\nimport isRadioOrCheckboxFunction from './utils/isRadioOrCheckbox';\nimport isHTMLElement from './utils/isHTMLElement';\nimport { EVENTS, UNDEFINED, VALIDATION_MODE } from './constants';\nimport {\n  UseFormMethods,\n  FieldValues,\n  UnpackNestedValue,\n  FieldName,\n  InternalFieldName,\n  FieldValue,\n  FieldErrors,\n  Field,\n  FieldRefs,\n  UseFormOptions,\n  ValidationRules,\n  SubmitHandler,\n  FieldElement,\n  FormStateProxy,\n  ReadFormState,\n  Ref,\n  HandleChange,\n  RadioOrCheckboxOption,\n  OmitResetState,\n  NestedValue,\n  SetValueConfig,\n  ErrorOption,\n  FormState,\n  SubmitErrorHandler,\n  FieldNamesMarkedBoolean,\n  LiteralToPrimitive,\n  DeepPartial,\n  InternalNameSet,\n  DefaultValues,\n  FieldError,\n} from './types';\n\nconst isWindowUndefined = typeof window === UNDEFINED;\nconst isWeb =\n  typeof document !== UNDEFINED &&\n  !isWindowUndefined &&\n  !isUndefined(window.HTMLElement);\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object\n>({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  resolver,\n  context,\n  defaultValues = {} as UnpackNestedValue<DeepPartial<TFieldValues>>,\n  shouldFocusError = true,\n  shouldUnregister = true,\n  criteriaMode,\n}: UseFormOptions<TFieldValues, TContext> = {}): UseFormMethods<TFieldValues> {\n  const fieldsRef = React.useRef<FieldRefs<TFieldValues>>({});\n  const fieldArrayDefaultValuesRef = React.useRef<\n    Record<InternalFieldName<FieldValues>, unknown[]>\n  >({});\n  const watchFieldsRef = React.useRef<InternalNameSet<TFieldValues>>(new Set());\n  const useWatchFieldsRef = React.useRef<\n    Record<string, InternalNameSet<TFieldValues>>\n  >({});\n  const useWatchRenderFunctionsRef = React.useRef<Record<string, () => void>>(\n    {},\n  );\n  const fieldsWithValidationRef = React.useRef<\n    FieldNamesMarkedBoolean<TFieldValues>\n  >({});\n  const validFieldsRef = React.useRef<FieldNamesMarkedBoolean<TFieldValues>>(\n    {},\n  );\n  const defaultValuesRef = React.useRef<DefaultValues<TFieldValues>>(\n    defaultValues,\n  );\n  const defaultValuesAtRenderRef = React.useRef<\n    Partial<DefaultValues<TFieldValues>>\n  >({});\n  const isUnMount = React.useRef(false);\n  const isWatchAllRef = React.useRef(false);\n  const handleChangeRef = React.useRef<HandleChange>();\n  const shallowFieldsStateRef = React.useRef(\n    shouldUnregister ? {} : cloneObject(defaultValues),\n  );\n  const resetFieldArrayFunctionRef = React.useRef<\n    Record<\n      InternalFieldName<FieldValues>,\n      (data?: UnpackNestedValue<DeepPartial<TFieldValues>>) => void\n    >\n  >({});\n  const contextRef = React.useRef(context);\n  const resolverRef = React.useRef(resolver);\n  const fieldArrayNamesRef = React.useRef<InternalNameSet<TFieldValues>>(\n    new Set(),\n  );\n  const modeRef = React.useRef(modeChecker(mode));\n  const { isOnSubmit, isOnTouch } = modeRef.current;\n  const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  const [formState, setFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touched: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: !isOnSubmit,\n    errors: {},\n  });\n  const readFormStateRef = React.useRef<ReadFormState>({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    touched: !isProxyEnabled || isOnTouch,\n    isSubmitting: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n  });\n  const formStateRef = React.useRef(formState);\n  const observerRef = React.useRef<MutationObserver | undefined>();\n  const {\n    isOnBlur: isReValidateOnBlur,\n    isOnChange: isReValidateOnChange,\n  } = React.useRef(modeChecker(reValidateMode)).current;\n\n  contextRef.current = context;\n  resolverRef.current = resolver;\n  formStateRef.current = formState;\n\n  const updateFormState = React.useCallback(\n    (state: Partial<FormState<TFieldValues>> = {}) =>\n      !isUnMount.current &&\n      setFormState({\n        ...formStateRef.current,\n        ...state,\n      }),\n    [],\n  );\n\n  const shouldRenderBaseOnError = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      error: FieldError | undefined,\n      shouldRender: boolean | null = false,\n      state: {\n        dirtyFields?: FieldNamesMarkedBoolean<TFieldValues>;\n        isDirty?: boolean;\n        touched?: FieldNamesMarkedBoolean<TFieldValues>;\n      } = {},\n      isValid?: boolean,\n    ): boolean | void => {\n      let shouldReRender =\n        shouldRender ||\n        isErrorStateChanged<TFieldValues>({\n          errors: formStateRef.current.errors,\n          error,\n          name,\n          validFields: validFieldsRef.current,\n          fieldsWithValidation: fieldsWithValidationRef.current,\n        });\n      const previousError = get(formStateRef.current.errors, name);\n\n      if (error) {\n        unset(validFieldsRef.current, name);\n        shouldReRender =\n          shouldReRender ||\n          !previousError ||\n          !deepEqual(previousError, error, true);\n        set(formStateRef.current.errors, name, error);\n      } else {\n        if (get(fieldsWithValidationRef.current, name) || resolverRef.current) {\n          set(validFieldsRef.current, name, true);\n          shouldReRender = shouldReRender || previousError;\n        }\n        unset(formStateRef.current.errors, name);\n      }\n\n      if (\n        (shouldReRender && !isNullOrUndefined(shouldRender)) ||\n        !isEmptyObject(state)\n      ) {\n        updateFormState({\n          ...state,\n          errors: formStateRef.current.errors,\n          ...(resolverRef.current ? { isValid: !!isValid } : {}),\n        });\n      }\n    },\n    [],\n  );\n\n  const setFieldValue = React.useCallback(\n    (\n      name: string,\n      rawValue:\n        | FieldValue<TFieldValues>\n        | UnpackNestedValue<DeepPartial<TFieldValues>>\n        | string[]\n        | undefined\n        | null\n        | boolean,\n    ) => {\n      const { ref, options } = fieldsRef.current[name] as Field;\n      const value =\n        isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue)\n          ? ''\n          : rawValue;\n\n      if (isRadioInput(ref) && options) {\n        options.forEach(\n          ({ ref: radioRef }: { ref: HTMLInputElement }) =>\n            (radioRef.checked = radioRef.value === value),\n        );\n      } else if (isFileInput(ref) && !isString(value)) {\n        ref.files = value as FileList;\n      } else if (isMultipleSelect(ref)) {\n        [...ref.options].forEach(\n          (selectRef) =>\n            (selectRef.selected = (value as string[]).includes(\n              selectRef.value,\n            )),\n        );\n      } else if (isCheckBoxInput(ref) && options) {\n        options.length > 1\n          ? options.forEach(\n              ({ ref: checkboxRef }) =>\n                (checkboxRef.checked = Array.isArray(value)\n                  ? !!(value as []).find(\n                      (data: string) => data === checkboxRef.value,\n                    )\n                  : value === checkboxRef.value),\n            )\n          : (options[0].ref.checked = !!value);\n      } else {\n        ref.value = value;\n      }\n    },\n    [],\n  );\n\n  const isFormDirty = () =>\n    !deepEqual(\n      getValues(),\n      isEmptyObject(defaultValuesRef.current)\n        ? defaultValuesAtRenderRef.current\n        : defaultValuesRef.current,\n    );\n\n  const updateAndGetDirtyState = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      shouldRender = true,\n    ): {\n      dirtyFields?: FieldNamesMarkedBoolean<TFieldValues>;\n      isDirty?: boolean;\n      touched?: FieldNamesMarkedBoolean<TFieldValues>;\n    } => {\n      if (\n        readFormStateRef.current.isDirty ||\n        readFormStateRef.current.dirtyFields\n      ) {\n        const isFieldDirty =\n          get(defaultValuesAtRenderRef.current, name) !==\n          getFieldValue(fieldsRef, name, shallowFieldsStateRef);\n        const isDirtyFieldExist = get(formStateRef.current.dirtyFields, name);\n        const previousIsDirty = formStateRef.current.isDirty;\n\n        isFieldDirty\n          ? set(formStateRef.current.dirtyFields, name, true)\n          : unset(formStateRef.current.dirtyFields, name);\n\n        const state = {\n          isDirty: isFormDirty(),\n          dirtyFields: formStateRef.current.dirtyFields,\n        };\n\n        const isChanged =\n          (readFormStateRef.current.isDirty &&\n            previousIsDirty !== state.isDirty) ||\n          (readFormStateRef.current.dirtyFields &&\n            isDirtyFieldExist !== get(formStateRef.current.dirtyFields, name));\n\n        if (isChanged && shouldRender) {\n          formStateRef.current = {\n            ...formStateRef.current,\n            ...state,\n          };\n          updateFormState({\n            ...state,\n          });\n        }\n\n        return isChanged ? state : {};\n      }\n\n      return {};\n    },\n    [],\n  );\n\n  const executeValidation = React.useCallback(\n    async (\n      name: InternalFieldName<TFieldValues>,\n      skipReRender?: boolean | null,\n    ): Promise<boolean> => {\n      if (fieldsRef.current[name]) {\n        const error = (\n          await validateField<TFieldValues>(\n            fieldsRef,\n            isValidateAllFieldCriteria,\n            fieldsRef.current[name] as Field,\n            shallowFieldsStateRef,\n          )\n        )[name];\n\n        shouldRenderBaseOnError(name, error, skipReRender);\n\n        return isUndefined(error);\n      }\n\n      return false;\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const executeSchemaOrResolverValidation = React.useCallback(\n    async (\n      names:\n        | InternalFieldName<TFieldValues>\n        | InternalFieldName<TFieldValues>[],\n    ) => {\n      const { errors } = await resolverRef.current!(\n        getValues(),\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const previousFormIsValid = formStateRef.current.isValid;\n\n      if (Array.isArray(names)) {\n        const isInputsValid = names\n          .map((name) => {\n            const error = get(errors, name);\n\n            error\n              ? set(formStateRef.current.errors, name, error)\n              : unset(formStateRef.current.errors, name);\n\n            return !error;\n          })\n          .every(Boolean);\n\n        updateFormState({\n          isValid: isEmptyObject(errors),\n          errors: formStateRef.current.errors,\n        });\n\n        return isInputsValid;\n      } else {\n        const error = get(errors, names);\n\n        shouldRenderBaseOnError(\n          names,\n          error,\n          previousFormIsValid !== isEmptyObject(errors),\n          {},\n          isEmptyObject(errors),\n        );\n\n        return !error;\n      }\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const trigger = React.useCallback(\n    async (\n      name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n    ): Promise<boolean> => {\n      const fields = name || Object.keys(fieldsRef.current);\n\n      if (resolverRef.current) {\n        return executeSchemaOrResolverValidation(fields);\n      }\n\n      if (Array.isArray(fields)) {\n        const result = await Promise.all(\n          fields.map(async (data) => await executeValidation(data, null)),\n        );\n        updateFormState();\n        return result.every(Boolean);\n      }\n\n      return await executeValidation(fields, readFormStateRef.current.isValid);\n    },\n    [executeSchemaOrResolverValidation, executeValidation],\n  );\n\n  const setInternalValues = React.useCallback(\n    <T extends string, U extends object | unknown[]>(\n      name: T,\n      value: U,\n      { shouldDirty, shouldValidate }: SetValueConfig,\n    ) => {\n      const data = {};\n      set(data, name, value);\n\n      for (const fieldName of getPath(name, value)) {\n        if (fieldsRef.current[fieldName]) {\n          setFieldValue(fieldName, get(data, fieldName));\n          shouldDirty && updateAndGetDirtyState(fieldName);\n          shouldValidate && trigger(fieldName as FieldName<TFieldValues>);\n        }\n      }\n    },\n    [trigger, setFieldValue, updateAndGetDirtyState],\n  );\n\n  const setInternalValue = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      value: FieldValue<TFieldValues> | null | undefined | boolean,\n      config: SetValueConfig = {},\n    ) => {\n      if (fieldsRef.current[name]) {\n        setFieldValue(name, value);\n        config.shouldDirty && updateAndGetDirtyState(name);\n      } else if (!isPrimitive(value)) {\n        setInternalValues(name, value, config);\n\n        if (fieldArrayNamesRef.current.has(name) && config.shouldDirty) {\n          fieldArrayDefaultValuesRef.current[name] = value;\n          resetFieldArrayFunctionRef.current[name]({\n            [name]: value,\n          } as UnpackNestedValue<DeepPartial<TFieldValues>>);\n\n          if (\n            readFormStateRef.current.isDirty ||\n            readFormStateRef.current.dirtyFields\n          ) {\n            set(\n              formStateRef.current.dirtyFields,\n              name,\n              setFieldArrayDirtyFields(\n                value,\n                get(defaultValuesRef.current, name, []),\n                get(formStateRef.current.dirtyFields, name, []),\n              ),\n            );\n\n            updateFormState({\n              isDirty: !deepEqual(\n                { ...getValues(), [name]: value },\n                defaultValuesRef.current,\n              ),\n              dirtyFields: formStateRef.current.dirtyFields,\n            });\n          }\n        }\n      }\n\n      !shouldUnregister && set(shallowFieldsStateRef.current, name, value);\n    },\n    [updateAndGetDirtyState, setFieldValue, setInternalValues],\n  );\n\n  const isFieldWatched = (name: string) =>\n    isWatchAllRef.current ||\n    watchFieldsRef.current.has(name) ||\n    watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\n\n  const renderWatchedInputs = (name: string, found = true): boolean => {\n    if (!isEmptyObject(useWatchFieldsRef.current)) {\n      for (const key in useWatchFieldsRef.current) {\n        if (\n          !name ||\n          !useWatchFieldsRef.current[key].size ||\n          useWatchFieldsRef.current[key].has(name) ||\n          useWatchFieldsRef.current[key].has(getFieldArrayParentName(name))\n        ) {\n          useWatchRenderFunctionsRef.current[key]();\n          found = false;\n        }\n      }\n    }\n\n    return found;\n  };\n\n  function setValue<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name: TFieldName,\n    value: TFieldValue extends NestedValue<infer U>\n      ? U\n      : UnpackNestedValue<DeepPartial<LiteralToPrimitive<TFieldValue>>>,\n    config?: SetValueConfig,\n  ): void {\n    setInternalValue(name, value as TFieldValues[string], config);\n\n    isFieldWatched(name) && updateFormState();\n    renderWatchedInputs(name);\n    (config || {}).shouldValidate && trigger(name as any);\n  }\n\n  handleChangeRef.current = handleChangeRef.current\n    ? handleChangeRef.current\n    : async ({ type, target }: Event): Promise<void | boolean> => {\n        const name = (target as Ref)!.name;\n        const field = fieldsRef.current[name];\n        let error;\n        let isValid;\n\n        if (field) {\n          const isBlurEvent = type === EVENTS.BLUR;\n          const shouldSkipValidation = skipValidation({\n            isBlurEvent,\n            isReValidateOnChange,\n            isReValidateOnBlur,\n            isTouched: !!get(formStateRef.current.touched, name),\n            isSubmitted: formStateRef.current.isSubmitted,\n            ...modeRef.current,\n          });\n          let state = updateAndGetDirtyState(name, false);\n          let shouldRender = !isEmptyObject(state) || isFieldWatched(name);\n\n          if (\n            isBlurEvent &&\n            !get(formStateRef.current.touched, name) &&\n            readFormStateRef.current.touched\n          ) {\n            set(formStateRef.current.touched, name, true);\n            state = {\n              ...state,\n              touched: formStateRef.current.touched,\n            };\n          }\n\n          if (shouldSkipValidation) {\n            renderWatchedInputs(name);\n            return (\n              (!isEmptyObject(state) ||\n                (shouldRender && isEmptyObject(state))) &&\n              updateFormState(state)\n            );\n          }\n\n          if (resolverRef.current) {\n            const { errors } = await resolverRef.current(\n              getValues(),\n              contextRef.current,\n              isValidateAllFieldCriteria,\n            );\n            const previousFormIsValid = formStateRef.current.isValid;\n\n            error = get(errors, name);\n\n            isValid = isEmptyObject(errors);\n\n            if (previousFormIsValid !== isValid) {\n              shouldRender = true;\n            }\n          } else {\n            error = (\n              await validateField<TFieldValues>(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                shallowFieldsStateRef,\n              )\n            )[name];\n          }\n\n          renderWatchedInputs(name);\n          shouldRenderBaseOnError(name, error, shouldRender, state, isValid);\n        }\n      };\n\n  function setFieldArrayDefaultValues<T extends FieldValues>(data: T): T {\n    if (!shouldUnregister) {\n      for (const value of fieldArrayNamesRef.current) {\n        if (isKey(value) && !data[value]) {\n          data = {\n            ...data,\n            [value]: [],\n          };\n        }\n      }\n    }\n    return data;\n  }\n\n  function getValues(): UnpackNestedValue<TFieldValues>;\n  function getValues<TFieldName extends string, TFieldValue extends unknown>(\n    name: TFieldName,\n  ): TFieldName extends keyof TFieldValues\n    ? UnpackNestedValue<TFieldValues>[TFieldName]\n    : TFieldValue;\n  function getValues<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function getValues(payload?: string | string[]): unknown {\n    if (isString(payload)) {\n      return getFieldValue(fieldsRef, payload, shallowFieldsStateRef);\n    }\n\n    if (Array.isArray(payload)) {\n      const data = {};\n\n      for (const name of payload) {\n        set(data, name, getFieldValue(fieldsRef, name, shallowFieldsStateRef));\n      }\n\n      return data;\n    }\n\n    return setFieldArrayDefaultValues(\n      getFieldsValues(fieldsRef, shallowFieldsStateRef),\n    );\n  }\n\n  const validateResolver = React.useCallback(\n    async (values = {}) => {\n      const { errors } = await resolverRef.current!(\n        {\n          ...defaultValuesRef.current,\n          ...getValues(),\n          ...values,\n        },\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const isValid = isEmptyObject(errors);\n\n      formStateRef.current.isValid !== isValid &&\n        updateFormState({\n          isValid,\n        });\n    },\n    [isValidateAllFieldCriteria],\n  );\n\n  const removeFieldEventListener = React.useCallback(\n    (field: Field, forceDelete?: boolean) =>\n      findRemovedFieldAndRemoveListener(\n        fieldsRef,\n        handleChangeRef.current!,\n        field,\n        shallowFieldsStateRef,\n        shouldUnregister,\n        forceDelete,\n      ),\n    [shouldUnregister],\n  );\n\n  const removeFieldEventListenerAndRef = React.useCallback(\n    (field: Field | undefined, forceDelete?: boolean) => {\n      if (field) {\n        removeFieldEventListener(field, forceDelete);\n\n        if (shouldUnregister && !compact(field.options || []).length) {\n          unset(defaultValuesAtRenderRef.current, field.ref.name);\n          unset(validFieldsRef.current, field.ref.name);\n          unset(fieldsWithValidationRef.current, field.ref.name);\n          unset(formStateRef.current.errors, field.ref.name);\n          set(formStateRef.current.dirtyFields, field.ref.name, true);\n\n          updateFormState({\n            errors: formStateRef.current.errors,\n            isDirty: isFormDirty(),\n            dirtyFields: formStateRef.current.dirtyFields,\n          });\n\n          resolverRef.current && validateResolver();\n        }\n      }\n    },\n    [validateResolver, removeFieldEventListener],\n  );\n\n  function clearErrors(\n    name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    name &&\n      (Array.isArray(name) ? name : [name]).forEach((inputName) =>\n        fieldsRef.current[inputName]\n          ? isKey(inputName)\n            ? delete formStateRef.current.errors[inputName]\n            : set(formStateRef.current.errors, inputName, undefined)\n          : unset(formStateRef.current.errors, inputName),\n      );\n\n    updateFormState({\n      errors: name ? formStateRef.current.errors : {},\n    });\n  }\n\n  function setError(name: FieldName<TFieldValues>, error: ErrorOption): void {\n    const ref = (fieldsRef.current[name] || {})!.ref;\n\n    set(formStateRef.current.errors, name, {\n      ...error,\n      ref,\n    });\n\n    updateFormState({\n      isValid: false,\n      errors: formStateRef.current.errors,\n    });\n\n    error.shouldFocus && ref && ref.focus && ref.focus();\n  }\n\n  const watchInternal = React.useCallback(\n    (\n      fieldNames?: string | string[],\n      defaultValue?: unknown,\n      watchId?: string,\n    ) => {\n      const watchFields = watchId\n        ? useWatchFieldsRef.current[watchId]\n        : watchFieldsRef.current;\n      const combinedDefaultValues = isUndefined(defaultValue)\n        ? defaultValuesRef.current\n        : defaultValue;\n      const fieldValues = getFieldsValues<TFieldValues>(\n        fieldsRef,\n        shallowFieldsStateRef,\n        false,\n        fieldNames,\n      );\n\n      if (isString(fieldNames)) {\n        return assignWatchFields<TFieldValues>(\n          fieldValues,\n          fieldNames,\n          watchFields,\n          isUndefined(defaultValue)\n            ? get(combinedDefaultValues, fieldNames)\n            : (defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>),\n          true,\n        );\n      }\n\n      if (Array.isArray(fieldNames)) {\n        return fieldNames.reduce(\n          (previous, name) => ({\n            ...previous,\n            [name]: assignWatchFields<TFieldValues>(\n              fieldValues,\n              name,\n              watchFields,\n              combinedDefaultValues as UnpackNestedValue<\n                DeepPartial<TFieldValues>\n              >,\n            ),\n          }),\n          {},\n        );\n      }\n\n      isWatchAllRef.current = isUndefined(watchId);\n\n      return transformToNestObject(\n        (!isEmptyObject(fieldValues) && fieldValues) ||\n          (combinedDefaultValues as FieldValues),\n      );\n    },\n    [],\n  );\n\n  function watch(): UnpackNestedValue<TFieldValues>;\n  function watch<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name: TFieldName,\n    defaultValue?: UnpackNestedValue<LiteralToPrimitive<TFieldValue>>,\n  ): UnpackNestedValue<LiteralToPrimitive<TFieldValue>>;\n  function watch<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n    defaultValues?: UnpackNestedValue<\n      DeepPartial<Pick<TFieldValues, TFieldName>>\n    >,\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function watch(\n    names: string[],\n    defaultValues?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  ): UnpackNestedValue<DeepPartial<TFieldValues>>;\n  function watch(\n    fieldNames?: string | string[],\n    defaultValue?: unknown,\n  ): unknown {\n    return watchInternal(fieldNames, defaultValue);\n  }\n\n  function unregister(\n    name: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    for (const fieldName of Array.isArray(name) ? name : [name]) {\n      removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true);\n    }\n  }\n\n  function registerFieldRef<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: TFieldElement & Ref,\n    validateOptions: ValidationRules | null = {},\n  ): ((name: InternalFieldName<TFieldValues>) => void) | void {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!ref.name) {\n        return console.warn(\n          '📋 Field is missing `name` attribute',\n          ref,\n          `https://react-hook-form.com/api#useForm`,\n        );\n      }\n\n      if (\n        fieldArrayNamesRef.current.has(ref.name.split(/\\[\\d+\\]$/)[0]) &&\n        !RegExp(\n          `^${ref.name.split(/\\[\\d+\\]$/)[0]}[\\\\d+].\\\\w+`\n            .replace(/\\[/g, '\\\\[')\n            .replace(/\\]/g, '\\\\]'),\n        ).test(ref.name)\n      ) {\n        return console.warn(\n          '📋 `name` prop should be in object shape: name=\"test[index].name\"',\n          ref,\n          'https://react-hook-form.com/api#useFieldArray',\n        );\n      }\n    }\n\n    const { name, type, value } = ref;\n    const fieldRefAndValidationOptions = {\n      ref,\n      ...validateOptions,\n    };\n    const fields = fieldsRef.current;\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n    const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n    const compareRef = (currentRef: Ref) =>\n      isWeb && (!isHTMLElement(ref) || currentRef === ref);\n    let field = fields[name] as Field;\n    let isEmptyDefaultValue = true;\n    let defaultValue;\n\n    if (\n      field &&\n      (isRadioOrCheckbox\n        ? Array.isArray(field.options) &&\n          compact(field.options).find((option) => {\n            return value === option.ref.value && compareRef(option.ref);\n          })\n        : compareRef(field.ref))\n    ) {\n      fields[name] = {\n        ...field,\n        ...validateOptions,\n      };\n      return;\n    }\n\n    if (type) {\n      field = isRadioOrCheckbox\n        ? {\n            options: [\n              ...compact((field && field.options) || []),\n              {\n                ref,\n              } as RadioOrCheckboxOption,\n            ],\n            ref: { type, name },\n            ...validateOptions,\n          }\n        : {\n            ...fieldRefAndValidationOptions,\n          };\n    } else {\n      field = fieldRefAndValidationOptions;\n    }\n\n    fields[name] = field;\n\n    const isEmptyUnmountFields = isUndefined(\n      get(shallowFieldsStateRef.current, name),\n    );\n\n    if (!isEmptyObject(defaultValuesRef.current) || !isEmptyUnmountFields) {\n      defaultValue = get(\n        isEmptyUnmountFields\n          ? defaultValuesRef.current\n          : shallowFieldsStateRef.current,\n        name,\n      );\n      isEmptyDefaultValue = isUndefined(defaultValue);\n\n      if (!isEmptyDefaultValue && !isFieldArray) {\n        setFieldValue(name, defaultValue);\n      }\n    }\n\n    if (!isEmptyObject(validateOptions)) {\n      set(fieldsWithValidationRef.current, name, true);\n\n      if (!isOnSubmit && readFormStateRef.current.isValid) {\n        validateField(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          field,\n          shallowFieldsStateRef,\n        ).then((error: FieldErrors) => {\n          const previousFormIsValid = formStateRef.current.isValid;\n\n          isEmptyObject(error)\n            ? set(validFieldsRef.current, name, true)\n            : unset(validFieldsRef.current, name);\n\n          if (previousFormIsValid !== isEmptyObject(error)) {\n            updateFormState();\n          }\n        });\n      }\n    }\n\n    if (\n      !defaultValuesAtRenderRef.current[name] &&\n      !(isFieldArray && isEmptyDefaultValue)\n    ) {\n      const fieldValue = getFieldValue(fieldsRef, name, shallowFieldsStateRef);\n      set(\n        defaultValuesAtRenderRef.current,\n        name,\n        isEmptyDefaultValue\n          ? isObject(fieldValue)\n            ? { ...fieldValue }\n            : fieldValue\n          : defaultValue,\n      );\n      !isFieldArray && unset(formStateRef.current.dirtyFields, name);\n    }\n\n    if (type) {\n      attachEventListeners(\n        isRadioOrCheckbox && field.options\n          ? field.options[field.options.length - 1]\n          : field,\n        isRadioOrCheckbox || isSelectInput(ref),\n        handleChangeRef.current,\n      );\n    }\n  }\n\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    rules?: ValidationRules,\n  ): (ref: (TFieldElement & Ref) | null) => void;\n  function register(\n    name: FieldName<TFieldValues>,\n    rules?: ValidationRules,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: (TFieldElement & Ref) | null,\n    rules?: ValidationRules,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    refOrValidationOptions?:\n      | FieldName<TFieldValues>\n      | ValidationRules\n      | (TFieldElement & Ref)\n      | null,\n    rules?: ValidationRules,\n  ): ((ref: (TFieldElement & Ref) | null) => void) | void {\n    if (!isWindowUndefined) {\n      if (isString(refOrValidationOptions)) {\n        registerFieldRef({ name: refOrValidationOptions }, rules);\n      } else if (\n        isObject(refOrValidationOptions) &&\n        'name' in refOrValidationOptions\n      ) {\n        registerFieldRef(refOrValidationOptions, rules);\n      } else {\n        return (ref: (TFieldElement & Ref) | null) =>\n          ref && registerFieldRef(ref, refOrValidationOptions);\n      }\n    }\n  }\n\n  const handleSubmit = React.useCallback(\n    <TSubmitFieldValues extends FieldValues = TFieldValues>(\n      onValid: SubmitHandler<TSubmitFieldValues>,\n      onInvalid?: SubmitErrorHandler<TFieldValues>,\n    ) => async (e?: React.BaseSyntheticEvent): Promise<void> => {\n      if (e && e.preventDefault) {\n        e.preventDefault();\n        e.persist();\n      }\n      let fieldErrors: FieldErrors<TFieldValues> = {};\n      let fieldValues = setFieldArrayDefaultValues(\n        getFieldsValues(fieldsRef, shallowFieldsStateRef, true),\n      );\n\n      if (readFormStateRef.current.isSubmitting) {\n        updateFormState({\n          isSubmitting: true,\n        });\n      }\n\n      try {\n        if (resolverRef.current) {\n          const { errors, values } = await resolverRef.current(\n            fieldValues,\n            contextRef.current,\n            isValidateAllFieldCriteria,\n          );\n          formStateRef.current.errors = errors;\n          fieldErrors = errors;\n          fieldValues = values;\n        } else {\n          for (const field of Object.values(fieldsRef.current)) {\n            if (field) {\n              const {\n                ref: { name },\n              } = field;\n\n              const fieldError = await validateField(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                shallowFieldsStateRef,\n              );\n\n              if (fieldError[name]) {\n                set(fieldErrors, name, fieldError[name]);\n                unset(validFieldsRef.current, name);\n              } else if (get(fieldsWithValidationRef.current, name)) {\n                unset(formStateRef.current.errors, name);\n                set(validFieldsRef.current, name, true);\n              }\n            }\n          }\n        }\n\n        if (\n          isEmptyObject(fieldErrors) &&\n          Object.keys(formStateRef.current.errors).every(\n            (name) => name in fieldsRef.current,\n          )\n        ) {\n          updateFormState({\n            errors: {},\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          formStateRef.current.errors = {\n            ...formStateRef.current.errors,\n            ...fieldErrors,\n          };\n          onInvalid && (await onInvalid(fieldErrors, e));\n          shouldFocusError && focusOnErrorField(fieldsRef.current, fieldErrors);\n        }\n      } finally {\n        updateFormState({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful: isEmptyObject(formStateRef.current.errors),\n          errors: formStateRef.current.errors,\n          submitCount: formStateRef.current.submitCount + 1,\n        });\n      }\n    },\n    [shouldFocusError, isValidateAllFieldCriteria],\n  );\n\n  const resetRefs = ({\n    errors,\n    isDirty,\n    isSubmitted,\n    touched,\n    isValid,\n    submitCount,\n    dirtyFields,\n  }: OmitResetState) => {\n    if (!isValid) {\n      validFieldsRef.current = {};\n      fieldsWithValidationRef.current = {};\n    }\n\n    defaultValuesAtRenderRef.current = {};\n    fieldArrayDefaultValuesRef.current = {};\n    watchFieldsRef.current = new Set();\n    isWatchAllRef.current = false;\n\n    updateFormState({\n      submitCount: submitCount ? formStateRef.current.submitCount : 0,\n      isDirty: isDirty ? formStateRef.current.isDirty : false,\n      isSubmitted: isSubmitted ? formStateRef.current.isSubmitted : false,\n      isValid: isValid ? formStateRef.current.isValid : false,\n      dirtyFields: dirtyFields ? formStateRef.current.dirtyFields : {},\n      touched: touched ? formStateRef.current.touched : {},\n      errors: errors ? formStateRef.current.errors : {},\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n  };\n\n  const reset = (\n    values?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n    omitResetState: OmitResetState = {},\n  ): void => {\n    if (isWeb) {\n      for (const field of Object.values(fieldsRef.current)) {\n        if (field) {\n          const { ref, options } = field;\n          const inputRef =\n            isRadioOrCheckboxFunction(ref) && Array.isArray(options)\n              ? options[0].ref\n              : ref;\n\n          if (isHTMLElement(inputRef)) {\n            try {\n              inputRef.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n    }\n\n    fieldsRef.current = {};\n    defaultValuesRef.current = cloneObject(values || defaultValuesRef.current);\n\n    if (values) {\n      renderWatchedInputs('');\n    }\n\n    shallowFieldsStateRef.current = shouldUnregister\n      ? {}\n      : cloneObject(values) || {};\n\n    Object.values(resetFieldArrayFunctionRef.current).forEach(\n      (resetFieldArray) => isFunction(resetFieldArray) && resetFieldArray(),\n    );\n\n    resetRefs(omitResetState);\n  };\n\n  React.useEffect(() => {\n    isUnMount.current = false;\n    resolver && readFormStateRef.current.isValid && validateResolver();\n\n    observerRef.current =\n      observerRef.current || !isWeb\n        ? observerRef.current\n        : onDomRemove(fieldsRef, removeFieldEventListenerAndRef);\n\n    return () => {\n      isUnMount.current = true;\n      observerRef.current && observerRef.current.disconnect();\n      shallowFieldsStateRef.current = {};\n\n      if (process.env.NODE_ENV !== 'production') {\n        return;\n      }\n\n      Object.values(fieldsRef.current).forEach((field) =>\n        removeFieldEventListenerAndRef(field, true),\n      );\n    };\n  }, [removeFieldEventListenerAndRef]);\n\n  if (!resolver && readFormStateRef.current.isValid) {\n    formState.isValid =\n      deepEqual(validFieldsRef.current, fieldsWithValidationRef.current) &&\n      isEmptyObject(formStateRef.current.errors);\n  }\n\n  const commonProps = {\n    trigger,\n    setValue: React.useCallback(setValue, [setInternalValue, trigger]),\n    getValues: React.useCallback(getValues, []),\n    register: React.useCallback(register, [defaultValuesRef.current]),\n    unregister: React.useCallback(unregister, []),\n  };\n\n  const control = {\n    renderWatchedInputs,\n    shouldUnregister,\n    removeFieldEventListener,\n    watchInternal,\n    mode: modeRef.current,\n    reValidateMode: {\n      isReValidateOnBlur,\n      isReValidateOnChange,\n    },\n    fieldsRef,\n    isWatchAllRef,\n    watchFieldsRef,\n    resetFieldArrayFunctionRef,\n    useWatchFieldsRef,\n    useWatchRenderFunctionsRef,\n    fieldArrayDefaultValuesRef,\n    validFieldsRef,\n    fieldsWithValidationRef,\n    fieldArrayNamesRef,\n    readFormStateRef,\n    formStateRef,\n    defaultValuesRef,\n    shallowFieldsStateRef,\n    updateFormState,\n    validateResolver: resolver ? validateResolver : undefined,\n    ...commonProps,\n  };\n\n  return {\n    watch,\n    control,\n    formState: isProxyEnabled\n      ? new Proxy(formState, {\n          get: (obj, prop: keyof FormStateProxy) => {\n            if (process.env.NODE_ENV !== 'production') {\n              if (prop === 'isValid' && isOnSubmit) {\n                console.warn(\n                  '📋 `formState.isValid` is applicable with `onTouched`, `onChange` or `onBlur` mode. https://react-hook-form.com/api#formState',\n                );\n              }\n            }\n\n            if (prop in obj) {\n              readFormStateRef.current[prop] = true;\n              return obj[prop];\n            }\n\n            return undefined;\n          },\n        })\n      : formState,\n    handleSubmit,\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    setError: React.useCallback(setError, []),\n    errors: formState.errors,\n    ...commonProps,\n  };\n}\n","import * as React from 'react';\nimport { UseFormMethods, FieldValues, FormProviderProps } from './types';\n\nconst FormContext = React.createContext<UseFormMethods | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues\n>(): UseFormMethods<TFieldValues> =>\n  React.useContext(FormContext) as UseFormMethods<TFieldValues>;\n\nexport const FormProvider = <TFieldValues extends FieldValues>({\n  children,\n  ...props\n}: FormProviderProps<TFieldValues>) => (\n  <FormContext.Provider value={{ ...props } as UseFormMethods}>\n    {children}\n  </FormContext.Provider>\n);\n","import { UNDEFINED } from '../constants';\n\nexport default () => {\n  const d =\n    typeof performance === UNDEFINED ? Date.now() : performance.now() * 1000;\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n};\n","import isUndefined from './isUndefined';\nimport compact from './compact';\n\nconst removeAt = <T>(data: T[], index: number): T[] => [\n  ...data.slice(0, index),\n  ...data.slice(index + 1),\n];\n\nfunction removeAtIndexes<T>(data: T[], index: number[]): T[] {\n  let k = -1;\n\n  while (++k < data.length) {\n    if (index.indexOf(k) >= 0) {\n      delete data[k];\n    }\n  }\n\n  return compact(data);\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : Array.isArray(index)\n    ? removeAtIndexes(data, index)\n    : removeAt(data, index);\n","import isUndefined from './isUndefined';\n\nexport default <T>(\n  data: (T | undefined)[],\n  from: number,\n  to: number,\n): (T | undefined)[] => {\n  if (Array.isArray(data)) {\n    if (isUndefined(data[to])) {\n      data[to] = undefined;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n  }\n\n  return [];\n};\n","export default <T>(data: T[], indexA: number, indexB: number): void => {\n  const temp = [data[indexB], data[indexA]];\n  data[indexA] = temp[0];\n  data[indexB] = temp[1];\n};\n","export default function prepend<T>(data: T[]): (T | undefined)[];\nexport default function prepend<T>(data: T[], value: T | T[]): T[];\nexport default function prepend<T>(\n  data: T[],\n  value?: T | T[],\n): (T | undefined)[] {\n  return [...(Array.isArray(value) ? value : [value || undefined]), ...data];\n}\n","export default function insert<T>(data: T[], index: number): (T | undefined)[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value: T | T[],\n): T[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value?: T | T[],\n): (T | undefined)[] {\n  return [\n    ...data.slice(0, index),\n    ...(Array.isArray(value) ? value : [value || undefined]),\n    ...data.slice(index),\n  ];\n}\n","export default <T>(value: T | T[]): undefined[] | undefined =>\n  Array.isArray(value) ? Array(value.length).fill(undefined) : undefined;\n","import isObject from './isObject';\n\nfunction mapValueToBoolean<U>(value: U): boolean[] | Record<string, boolean>[] {\n  if (isObject(value)) {\n    const object: Record<string, boolean> = {};\n\n    for (const key in value) {\n      object[key] = true;\n    }\n\n    return [object];\n  }\n\n  return [true];\n}\n\nexport default <T>(value: T) =>\n  ((Array.isArray(value) ? value : [value]) as T[])\n    .map(mapValueToBoolean)\n    .flat();\n","import * as React from 'react';\nimport { useFormContext } from './useFormContext';\nimport { isMatchFieldArrayName } from './logic/isNameInFieldArray';\nimport generateId from './logic/generateId';\nimport deepEqual from './utils/deepEqual';\nimport getFieldArrayParentName from './logic/getFieldArrayParentName';\nimport get from './utils/get';\nimport set from './utils/set';\nimport isUndefined from './utils/isUndefined';\nimport removeArrayAt from './utils/remove';\nimport unset from './utils/unset';\nimport moveArrayAt from './utils/move';\nimport swapArrayAt from './utils/swap';\nimport prependAt from './utils/prepend';\nimport insertAt from './utils/insert';\nimport fillEmptyArray from './utils/fillEmptyArray';\nimport fillBooleanArray from './utils/fillBooleanArray';\nimport compact from './utils/compact';\nimport {\n  Field,\n  FieldValues,\n  UseFieldArrayOptions,\n  Control,\n  ArrayField,\n  UnpackNestedValue,\n  DeepPartial,\n  UseFieldArrayMethods,\n} from './types';\n\nconst mapIds = <\n  TFieldArrayValues extends FieldValues = FieldValues,\n  TKeyName extends string = 'id'\n>(\n  values: Partial<TFieldArrayValues>[],\n  keyName: TKeyName,\n): Partial<ArrayField<TFieldArrayValues, TKeyName>>[] =>\n  values.map((value: Partial<TFieldArrayValues>) => ({\n    [keyName]: generateId(),\n    ...value,\n  }));\n\nexport const useFieldArray = <\n  TFieldArrayValues extends FieldValues = FieldValues,\n  TKeyName extends string = 'id',\n  TControl extends Control = Control\n>({\n  control,\n  name,\n  keyName = 'id' as TKeyName,\n}: UseFieldArrayOptions<TKeyName, TControl>): UseFieldArrayMethods<\n  TFieldArrayValues,\n  TKeyName\n> => {\n  const methods = useFormContext();\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!control && !methods) {\n      throw new Error(\n        '📋 useFieldArray is missing `control` prop. https://react-hook-form.com/api#useFieldArray',\n      );\n    }\n  }\n\n  const focusIndexRef = React.useRef(-1);\n  const {\n    isWatchAllRef,\n    resetFieldArrayFunctionRef,\n    fieldArrayNamesRef,\n    fieldsRef,\n    defaultValuesRef,\n    removeFieldEventListener,\n    formStateRef,\n    shallowFieldsStateRef,\n    updateFormState,\n    readFormStateRef,\n    watchFieldsRef,\n    validFieldsRef,\n    fieldsWithValidationRef,\n    fieldArrayDefaultValuesRef,\n    validateResolver,\n    renderWatchedInputs,\n    getValues,\n    shouldUnregister,\n  } = control || methods.control;\n\n  const fieldArrayParentName = getFieldArrayParentName(name);\n  const memoizedDefaultValues = React.useRef<Partial<TFieldArrayValues>[]>([\n    ...(get(fieldArrayDefaultValuesRef.current, fieldArrayParentName)\n      ? get(fieldArrayDefaultValuesRef.current, name, [])\n      : get(\n          shouldUnregister\n            ? defaultValuesRef.current\n            : shallowFieldsStateRef.current,\n          name,\n          [],\n        )),\n  ]);\n  const [fields, setFields] = React.useState<\n    Partial<ArrayField<TFieldArrayValues, TKeyName>>[]\n  >(mapIds(memoizedDefaultValues.current, keyName));\n  const allFields = React.useRef<\n    Partial<ArrayField<TFieldArrayValues, TKeyName>>[]\n  >(fields);\n\n  const getCurrentFieldsValues = () =>\n    get(getValues(), name, allFields.current).map(\n      (item: Partial<TFieldArrayValues>, index: number) => ({\n        ...allFields.current[index],\n        ...item,\n      }),\n    );\n\n  allFields.current = fields;\n  fieldArrayNamesRef.current.add(name);\n\n  if (!get(fieldArrayDefaultValuesRef.current, fieldArrayParentName)) {\n    set(\n      fieldArrayDefaultValuesRef.current,\n      fieldArrayParentName,\n      get(defaultValuesRef.current, fieldArrayParentName),\n    );\n  }\n\n  const setFieldAndValidState = (\n    fieldsValues: Partial<ArrayField<TFieldArrayValues, TKeyName>>[],\n  ) => {\n    setFields(fieldsValues);\n\n    if (readFormStateRef.current.isValid && validateResolver) {\n      const values = getValues();\n      set(values, name, fieldsValues);\n      validateResolver(values);\n    }\n  };\n\n  const getIsDirtyState = (\n    flagOrFields?: (Partial<TFieldArrayValues> | undefined)[],\n  ): boolean =>\n    (readFormStateRef.current.isDirty ||\n      readFormStateRef.current.dirtyFields) &&\n    (isUndefined(flagOrFields) ||\n      !deepEqual(\n        flagOrFields.map(({ [keyName]: omitted, ...rest } = {}) => rest),\n        get(defaultValuesRef.current, name),\n      ));\n\n  const resetFields = () => {\n    for (const key in fieldsRef.current) {\n      isMatchFieldArrayName(key, name) &&\n        removeFieldEventListener(fieldsRef.current[key] as Field, true);\n    }\n  };\n\n  const cleanup = <T>(ref: T) =>\n    !compact(get(ref, name, [])).length && unset(ref, name);\n\n  const updateDirtyFieldsWithDefaultValues = <\n    T extends { [k: string]: unknown }[]\n  >(\n    updatedFieldArrayValues?: T,\n  ) => {\n    const defaultFieldArrayValues = get(defaultValuesRef.current, name, []);\n    const updateDirtyFieldsBaseOnDefaultValues = <U extends T>(\n      base: U,\n      target: U,\n    ) => {\n      for (const key in base) {\n        for (const innerKey in base[key]) {\n          if (\n            innerKey !== keyName &&\n            (!target[key] ||\n              !base[key] ||\n              base[key][innerKey] !== target[key][innerKey])\n          ) {\n            set(formStateRef.current.dirtyFields, `${name}[${key}]`, {\n              ...get(formStateRef.current.dirtyFields, `${name}[${key}]`, {}),\n              [innerKey]: true,\n            });\n          }\n        }\n      }\n    };\n\n    if (updatedFieldArrayValues) {\n      updateDirtyFieldsBaseOnDefaultValues(\n        defaultFieldArrayValues,\n        updatedFieldArrayValues,\n      );\n      updateDirtyFieldsBaseOnDefaultValues(\n        updatedFieldArrayValues,\n        defaultFieldArrayValues,\n      );\n    }\n  };\n\n  const batchStateUpdate = <\n    T extends Function,\n    K extends { [k: string]: unknown }[]\n  >(\n    method: T,\n    args: {\n      argA?: unknown;\n      argB?: unknown;\n      argC?: unknown;\n      argD?: unknown;\n    },\n    updatedFieldValues?: K,\n    isDirty = true,\n    shouldSet = true,\n    shouldUpdateValid = false,\n  ) => {\n    if (get(shallowFieldsStateRef.current, name)) {\n      const output = method(\n        get(shallowFieldsStateRef.current, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSet && set(shallowFieldsStateRef.current, name, output);\n    }\n\n    if (get(fieldArrayDefaultValuesRef.current, name)) {\n      const output = method(\n        get(fieldArrayDefaultValuesRef.current, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSet && set(fieldArrayDefaultValuesRef.current, name, output);\n      cleanup(fieldArrayDefaultValuesRef.current);\n    }\n\n    if (Array.isArray(get(formStateRef.current.errors, name))) {\n      const output = method(\n        get(formStateRef.current.errors, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSet && set(formStateRef.current.errors, name, output);\n      cleanup(formStateRef.current.errors);\n    }\n\n    if (\n      readFormStateRef.current.touched &&\n      get(formStateRef.current.touched, name)\n    ) {\n      const output = method(\n        get(formStateRef.current.touched, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSet && set(formStateRef.current.touched, name, output);\n      cleanup(formStateRef.current.touched);\n    }\n\n    if (\n      readFormStateRef.current.dirtyFields ||\n      readFormStateRef.current.isDirty\n    ) {\n      const output = method(\n        get(formStateRef.current.dirtyFields, name, []),\n        args.argC,\n        args.argD,\n      );\n      shouldSet && set(formStateRef.current.dirtyFields, name, output);\n      updateDirtyFieldsWithDefaultValues(updatedFieldValues);\n      cleanup(formStateRef.current.dirtyFields);\n    }\n\n    if (\n      shouldUpdateValid &&\n      readFormStateRef.current.isValid &&\n      !validateResolver\n    ) {\n      set(\n        validFieldsRef.current,\n        name,\n        method(get(validFieldsRef.current, name, []), args.argA),\n      );\n      cleanup(validFieldsRef.current);\n\n      set(\n        fieldsWithValidationRef.current,\n        name,\n        method(get(fieldsWithValidationRef.current, name, []), args.argA),\n      );\n      cleanup(fieldsWithValidationRef.current);\n    }\n\n    updateFormState({\n      errors: formStateRef.current.errors,\n      dirtyFields: formStateRef.current.dirtyFields,\n      isDirty,\n      touched: formStateRef.current.touched,\n    });\n  };\n\n  const append = (\n    value: Partial<TFieldArrayValues> | Partial<TFieldArrayValues>[],\n    shouldFocus = true,\n  ) => {\n    const updateFormValues = [\n      ...allFields.current,\n      ...mapIds(Array.isArray(value) ? value : [value], keyName),\n    ];\n    setFieldAndValidState(updateFormValues);\n\n    if (\n      readFormStateRef.current.dirtyFields ||\n      readFormStateRef.current.isDirty\n    ) {\n      updateDirtyFieldsWithDefaultValues(updateFormValues);\n\n      updateFormState({\n        isDirty: true,\n        dirtyFields: formStateRef.current.dirtyFields,\n      });\n    }\n\n    if (!shouldUnregister) {\n      shallowFieldsStateRef.current[name] = [\n        ...(shallowFieldsStateRef.current[name] || []),\n        value,\n      ];\n    }\n    focusIndexRef.current = shouldFocus ? allFields.current.length : -1;\n  };\n\n  const prepend = (\n    value: Partial<TFieldArrayValues> | Partial<TFieldArrayValues>[],\n    shouldFocus = true,\n  ) => {\n    const emptyArray = fillEmptyArray(value);\n    const updatedFieldArrayValues = prependAt(\n      getCurrentFieldsValues(),\n      mapIds(Array.isArray(value) ? value : [value], keyName),\n    );\n\n    setFieldAndValidState(updatedFieldArrayValues);\n    resetFields();\n    batchStateUpdate(\n      prependAt,\n      {\n        argA: emptyArray,\n        argC: fillBooleanArray(value),\n      },\n      updatedFieldArrayValues,\n    );\n    focusIndexRef.current = shouldFocus ? 0 : -1;\n  };\n\n  const remove = (index?: number | number[]) => {\n    const fieldValues = getCurrentFieldsValues();\n    const updatedFieldValues: { [k: string]: unknown }[] = removeArrayAt(\n      fieldValues,\n      index,\n    );\n    setFieldAndValidState(\n      updatedFieldValues as Partial<ArrayField<TFieldArrayValues, TKeyName>>[],\n    );\n    resetFields();\n    batchStateUpdate(\n      removeArrayAt,\n      {\n        argA: index,\n        argC: index,\n      },\n      updatedFieldValues,\n      getIsDirtyState(removeArrayAt(fieldValues, index)),\n      true,\n      true,\n    );\n  };\n\n  const insert = (\n    index: number,\n    value: Partial<TFieldArrayValues> | Partial<TFieldArrayValues>[],\n    shouldFocus = true,\n  ) => {\n    const emptyArray = fillEmptyArray(value);\n    const fieldValues = getCurrentFieldsValues();\n    const updatedFieldArrayValues = insertAt(\n      fieldValues,\n      index,\n      mapIds(Array.isArray(value) ? value : [value], keyName),\n    );\n\n    setFieldAndValidState(updatedFieldArrayValues);\n    resetFields();\n    batchStateUpdate(\n      insertAt,\n      {\n        argA: index,\n        argB: emptyArray,\n        argC: index,\n        argD: fillBooleanArray(value),\n      },\n      updatedFieldArrayValues,\n      getIsDirtyState(insertAt(fieldValues, index)),\n    );\n    focusIndexRef.current = shouldFocus ? index : -1;\n  };\n\n  const swap = (indexA: number, indexB: number) => {\n    const fieldValues = getCurrentFieldsValues();\n    swapArrayAt(fieldValues, indexA, indexB);\n    resetFields();\n    setFieldAndValidState([...fieldValues]);\n    batchStateUpdate(\n      swapArrayAt,\n      {\n        argA: indexA,\n        argB: indexB,\n        argC: indexA,\n        argD: indexB,\n      },\n      undefined,\n      getIsDirtyState(fieldValues),\n      false,\n    );\n  };\n\n  const move = (from: number, to: number) => {\n    const fieldValues = getCurrentFieldsValues();\n    moveArrayAt(fieldValues, from, to);\n    resetFields();\n    setFieldAndValidState([...fieldValues]);\n    batchStateUpdate(\n      moveArrayAt,\n      {\n        argA: from,\n        argB: to,\n        argC: from,\n        argD: to,\n      },\n      undefined,\n      getIsDirtyState(fieldValues),\n      false,\n    );\n  };\n\n  const reset = <TFieldValues>(\n    data?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  ) => {\n    resetFields();\n    !data && unset(fieldArrayDefaultValuesRef.current, name);\n    unset(shallowFieldsStateRef.current, name);\n    memoizedDefaultValues.current = get(data || defaultValuesRef.current, name);\n    setFields(mapIds(memoizedDefaultValues.current, keyName));\n  };\n\n  React.useEffect(() => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!name) {\n        console.warn(\n          '📋 useFieldArray is missing `name` attribute. https://react-hook-form.com/api#useFieldArray',\n        );\n      }\n    }\n\n    const defaultValues = get(fieldArrayDefaultValuesRef.current, name);\n\n    if (defaultValues && fields.length < defaultValues.length) {\n      defaultValues.pop();\n      set(fieldArrayDefaultValuesRef.current, name, defaultValues);\n    }\n\n    if (isWatchAllRef.current) {\n      updateFormState();\n    } else if (watchFieldsRef) {\n      let shouldRenderUseWatch = true;\n      for (const watchField of watchFieldsRef.current) {\n        if (watchField.startsWith(name)) {\n          updateFormState();\n          shouldRenderUseWatch = false;\n          break;\n        }\n      }\n\n      shouldRenderUseWatch && renderWatchedInputs(name);\n    }\n\n    if (focusIndexRef.current > -1) {\n      for (const key in fieldsRef.current) {\n        const field = fieldsRef.current[key];\n        if (\n          key.startsWith(`${name}[${focusIndexRef.current}]`) &&\n          field!.ref.focus\n        ) {\n          field!.ref.focus();\n          break;\n        }\n      }\n    }\n\n    focusIndexRef.current = -1;\n  }, [fields, name]);\n\n  React.useEffect(() => {\n    const resetFunctions = resetFieldArrayFunctionRef.current;\n    const fieldArrayNames = fieldArrayNamesRef.current;\n\n    if (!getFieldArrayParentName(name)) {\n      resetFunctions[name] = reset;\n    }\n\n    return () => {\n      resetFields();\n      delete resetFunctions[name];\n      fieldArrayNames.delete(name);\n    };\n  }, []);\n\n  return {\n    swap: React.useCallback(swap, [name]),\n    move: React.useCallback(move, [name]),\n    prepend: React.useCallback(prepend, [name]),\n    append: React.useCallback(append, [name]),\n    remove: React.useCallback(remove, [name]),\n    insert: React.useCallback(insert, [name]),\n    fields,\n  };\n};\n","import * as React from 'react';\nimport isUndefined from './utils/isUndefined';\nimport get from './utils/get';\nimport set from './utils/set';\nimport getInputValue from './logic/getInputValue';\nimport skipValidation from './logic/skipValidation';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport { useFormContext } from './useFormContext';\nimport { VALUE } from './constants';\nimport { Control } from './types';\nimport { ControllerProps } from './types';\n\nconst Controller = <\n  TAs extends\n    | React.ReactElement\n    | React.ComponentType<any>\n    | 'input'\n    | 'select'\n    | 'textarea',\n  TControl extends Control = Control\n>({\n  name,\n  rules,\n  as,\n  render,\n  defaultValue,\n  control,\n  onFocus,\n  ...rest\n}: ControllerProps<TAs, TControl>) => {\n  const methods = useFormContext();\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!control && !methods) {\n      throw new Error(\n        '📋 Controller is missing `control` prop. https://react-hook-form.com/api#Controller',\n      );\n    }\n  }\n\n  const {\n    defaultValuesRef,\n    setValue,\n    register,\n    unregister,\n    trigger,\n    mode,\n    reValidateMode: { isReValidateOnBlur, isReValidateOnChange },\n    formStateRef: {\n      current: { isSubmitted, touched },\n    },\n    updateFormState,\n    readFormStateRef,\n    fieldsRef,\n    fieldArrayNamesRef,\n    shallowFieldsStateRef,\n  } = control || methods.control;\n  const isNotFieldArray = !isNameInFieldArray(fieldArrayNamesRef.current, name);\n  const getInitialValue = () =>\n    !isUndefined(get(shallowFieldsStateRef.current, name)) && isNotFieldArray\n      ? get(shallowFieldsStateRef.current, name)\n      : isUndefined(defaultValue)\n      ? get(defaultValuesRef.current, name)\n      : defaultValue;\n  const [value, setInputStateValue] = React.useState(getInitialValue());\n  const valueRef = React.useRef(value);\n  const onFocusRef = React.useRef(onFocus);\n\n  const shouldValidate = (isBlurEvent?: boolean) =>\n    !skipValidation({\n      isBlurEvent,\n      isReValidateOnBlur,\n      isReValidateOnChange,\n      isSubmitted,\n      isTouched: !!get(touched, name),\n      ...mode,\n    });\n\n  const commonTask = ([event]: any[]) => {\n    const data = getInputValue(event);\n    setInputStateValue(data);\n    valueRef.current = data;\n    return data;\n  };\n\n  const registerField = React.useCallback(() => {\n    if (process.env.NODE_ENV !== 'production' && !name) {\n      return console.warn(\n        '📋 Field is missing `name` prop. https://react-hook-form.com/api#Controller',\n      );\n    }\n\n    if (fieldsRef.current[name]) {\n      fieldsRef.current[name] = {\n        ref: fieldsRef.current[name]!.ref,\n        ...rules,\n      };\n    } else {\n      register(\n        Object.defineProperty({ name, focus: onFocusRef.current }, VALUE, {\n          set(data) {\n            setInputStateValue(data);\n            valueRef.current = data;\n          },\n          get() {\n            return valueRef.current;\n          },\n        }),\n        rules,\n      );\n      if (isNotFieldArray && !get(defaultValuesRef.current, name)) {\n        setInputStateValue(getInitialValue());\n      }\n    }\n  }, [rules, name, register]);\n\n  React.useEffect(() => () => unregister(name), [unregister, name]);\n\n  React.useEffect(() => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (isUndefined(value)) {\n        console.warn(\n          `📋 ${name} is missing in the 'defaultValue' prop of either its Controller (https://react-hook-form.com/api#Controller) or useForm (https://react-hook-form.com/api#useForm)`,\n        );\n      }\n\n      if ((!as && !render) || (as && render)) {\n        console.warn(\n          `📋 ${name} Controller should use either the 'as' or 'render' prop, not both. https://react-hook-form.com/api#Controller`,\n        );\n      }\n\n      if (!isNotFieldArray && isUndefined(defaultValue)) {\n        console.warn(\n          '📋 Controller is missing `defaultValue` prop when using `useFieldArray`. https://react-hook-form.com/api#Controller',\n        );\n      }\n    }\n\n    registerField();\n  }, [registerField]);\n\n  React.useEffect(() => {\n    if (!fieldsRef.current[name]) {\n      registerField();\n      if (isNotFieldArray) {\n        setInputStateValue(getInitialValue());\n      }\n    }\n  });\n\n  const onBlur = () => {\n    if (readFormStateRef.current.touched && !get(touched, name)) {\n      set(touched, name, true);\n      updateFormState({\n        touched,\n      });\n    }\n\n    if (shouldValidate(true)) {\n      trigger(name);\n    }\n  };\n\n  const onChange = (...event: any[]) =>\n    setValue(name, commonTask(event), {\n      shouldValidate: shouldValidate(),\n      shouldDirty: true,\n    });\n\n  const props = {\n    ...rest,\n    onChange,\n    onBlur,\n    name,\n    value,\n  };\n\n  return as\n    ? React.isValidElement(as)\n      ? React.cloneElement(as, props)\n      : React.createElement(as as string, props as any)\n    : render\n    ? render({\n        onChange,\n        onBlur,\n        value,\n        name,\n      })\n    : null;\n};\n\nexport { Controller };\n","import isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport isPrimitive from '../utils/isPrimitive';\n\nexport default (event: any) =>\n  isPrimitive(event) ||\n  !isObject(event.target) ||\n  (isObject(event.target) && !event.type)\n    ? event\n    : isUndefined(event.target.value)\n    ? event.target.checked\n    : event.target.value;\n","import get from '../utils/get';\nimport isUndefined from '../utils/isUndefined';\nimport deepEqual from '../utils/deepEqual';\nimport {\n  FieldValues,\n  InternalFieldName,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldError,\n} from '../types';\n\nexport default function isErrorStateChanged<TFieldValues extends FieldValues>({\n  errors,\n  name,\n  error,\n  validFields,\n  fieldsWithValidation,\n}: {\n  errors: FieldErrors<TFieldValues>;\n  error: FieldError | undefined;\n  name: InternalFieldName<TFieldValues>;\n  validFields: FieldNamesMarkedBoolean<TFieldValues>;\n  fieldsWithValidation: FieldNamesMarkedBoolean<TFieldValues>;\n}): boolean {\n  const isValid = isUndefined(error);\n  const previousError = get(errors, name);\n\n  return (\n    (isValid && !!previousError) ||\n    (!isValid && !deepEqual(previousError, error, true)) ||\n    (isValid && get(fieldsWithValidation, name) && !get(validFields, name))\n  );\n}\n","import { get } from '../utils';\nimport set from '../utils/set';\n\nexport default function setFieldArrayDirtyFields<\n  T extends U,\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setFieldArrayDirtyFields(\n          values[index][key],\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        get(defaultValues[index] || {}, key) === values[index][key]\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n    !dirtyFields.length &&\n      parentNode &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields.length ? dirtyFields : undefined;\n}\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Field } from '../types';\n\nexport default function attachEventListeners(\n  { ref }: Field,\n  shouldAttachChangeEvent?: boolean,\n  handleChange?: EventListenerOrEventListenerObject,\n): void {\n  if (isHTMLElement(ref) && handleChange) {\n    ref.addEventListener(\n      shouldAttachChangeEvent ? EVENTS.CHANGE : EVENTS.INPUT,\n      handleChange,\n    );\n    ref.addEventListener(EVENTS.BLUR, handleChange);\n  }\n}\n","import { FieldElement } from '../types';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-one`;\n","import get from '../utils/get';\nimport { FieldErrors, FieldRefs } from '../types';\n\nexport default <TFieldValues>(\n  fields: FieldRefs<TFieldValues>,\n  fieldErrors: FieldErrors<TFieldValues>,\n) => {\n  for (const key in fields) {\n    if (get(fieldErrors, key)) {\n      const field = fields[key];\n\n      if (field) {\n        if (field.ref.focus) {\n          field.ref.focus();\n\n          break;\n        } else if (field.options) {\n          field.options[0].ref.focus();\n\n          break;\n        }\n      }\n    }\n  }\n};\n","import * as React from 'react';\nimport { Field, FieldRefs } from '../types';\nimport isDetached from './isDetached';\n\nexport default function onDomRemove<TFieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  removeFieldEventListenerAndRef: (\n    field: Field | undefined,\n    forceDelete?: boolean,\n  ) => void,\n): MutationObserver {\n  const observer = new MutationObserver((): void => {\n    for (const field of Object.values(fieldsRef.current)) {\n      if (field && field.options) {\n        for (const option of field.options) {\n          if (option && option.ref && isDetached(option.ref)) {\n            removeFieldEventListenerAndRef(field);\n          }\n        }\n      } else if (field && isDetached(field.ref)) {\n        removeFieldEventListenerAndRef(field);\n      }\n    }\n  });\n\n  observer.observe(window.document, {\n    childList: true,\n    subtree: true,\n  });\n\n  return observer;\n}\n","import * as React from 'react';\nimport { useFormContext } from './useFormContext';\nimport isUndefined from './utils/isUndefined';\nimport isString from './utils/isString';\nimport generateId from './logic/generateId';\nimport get from './utils/get';\nimport isObject from './utils/isObject';\nimport {\n  DeepPartial,\n  UseWatchOptions,\n  FieldValues,\n  UnpackNestedValue,\n  Control,\n} from './types';\n\nexport function useWatch<TWatchFieldValues extends FieldValues>(props: {\n  defaultValue?: UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\n  control?: Control;\n}): UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\nexport function useWatch<TWatchFieldValue extends any>(props: {\n  name: string;\n  control?: Control;\n}): undefined | UnpackNestedValue<TWatchFieldValue>;\nexport function useWatch<TWatchFieldValue extends any>(props: {\n  name: string;\n  defaultValue: UnpackNestedValue<TWatchFieldValue>;\n  control?: Control;\n}): UnpackNestedValue<TWatchFieldValue>;\nexport function useWatch<TWatchFieldValues extends FieldValues>(props: {\n  name: string[];\n  defaultValue?: UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\n  control?: Control;\n}): UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\nexport function useWatch<TWatchFieldValues>({\n  control,\n  name,\n  defaultValue,\n}: UseWatchOptions): TWatchFieldValues {\n  const methods = useFormContext();\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!control && !methods) {\n      throw new Error(\n        '📋 useWatch is missing `control` prop. https://react-hook-form.com/api#useWatch',\n      );\n    }\n  }\n\n  const {\n    useWatchFieldsRef,\n    useWatchRenderFunctionsRef,\n    watchInternal,\n    defaultValuesRef,\n  } = control || methods.control;\n  const [value, setValue] = React.useState<unknown>(\n    isUndefined(defaultValue)\n      ? isString(name)\n        ? get(defaultValuesRef.current, name)\n        : Array.isArray(name)\n        ? name.reduce(\n            (previous, inputName) => ({\n              ...previous,\n              [inputName]: get(defaultValuesRef.current, inputName),\n            }),\n            {},\n          )\n        : defaultValuesRef.current\n      : defaultValue,\n  );\n  const idRef = React.useRef<string>();\n  const defaultValueRef = React.useRef(value);\n\n  const updateWatchValue = React.useCallback(() => {\n    const value = watchInternal(name, defaultValueRef.current, idRef.current);\n    setValue(\n      isObject(value)\n        ? { ...value }\n        : Array.isArray(value)\n        ? [...value]\n        : value,\n    );\n  }, [setValue, watchInternal, defaultValueRef, name, idRef]);\n\n  React.useEffect(() => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (name === '') {\n        console.warn(\n          '📋 useWatch is missing `name` attribute. https://react-hook-form.com/api#useWatch',\n        );\n      }\n    }\n\n    const id = (idRef.current = generateId());\n    const watchFieldsHookRender = useWatchRenderFunctionsRef.current;\n    const watchFieldsHook = useWatchFieldsRef.current;\n    watchFieldsHook[id] = new Set();\n    watchFieldsHookRender[id] = updateWatchValue;\n    watchInternal(name, defaultValueRef.current, id);\n\n    return () => {\n      delete watchFieldsHook[id];\n      delete watchFieldsHookRender[id];\n    };\n  }, [\n    name,\n    updateWatchValue,\n    useWatchRenderFunctionsRef,\n    useWatchFieldsRef,\n    watchInternal,\n    defaultValueRef,\n  ]);\n\n  return (isUndefined(value) ? defaultValue : value) as TWatchFieldValues;\n}\n"],"names":["value","HTMLElement","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","isObjectType","isNullOrUndefined","Array","isArray","Date","test","filter","Boolean","input","compact","replace","split","set","object","path","index","tempPath","isKey","stringToPath","length","lastIndex","key","newValue","objValue","isObject","isNaN","data","val","undefined","obj","defaultValue","result","reduce","isUndefined","ref","validateWithStateUpdate","isHTMLElement","removeEventListener","defaultReturn","isValid","options","previous","option","checked","element","type","SELECT","defaultResult","validResult","values","map","_a","attributes","getFieldValue","fieldsRef","name","shallowFieldsStateRef","excludeDisabled","field","current","disabled","isFileInput","files","isRadioInput","getRadioValue","isMultipleSelect","__spread","isCheckBox","getCheckboxValue","get","isDetached","nodeType","Node","DOCUMENT_NODE","parentNode","Object","keys","unset","updatePath","childObject","slice","baseGet","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","isEmptyObject","isBoolean","isSameRef","fieldValue","search","output","name_1","isString","startsWith","find","deepMerge","target","source","isPrimitive","targetValue","sourceValue","transformToNestObject","deepEqual","object1","object2","isErrorObject","keys1","keys2","keys1_1","__values","includes","val1","val2","RegExp","validationData","isRegex","message","isValidElement","getValidateError","isMessage","validateAllFieldCriteria","errors","error","types","_b","required","maxLength","minLength","min","max","pattern","validate","fields","isRadio","isCheckBoxInput","isRadioOrCheckbox","isEmpty","appendErrorsCurry","appendErrors","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","_c","getValueAndMessage","requiredValue","requiredMessage","exceedMin","_d","maxValue","maxMessage","_e","minValue","minMessage","valueNumber","valueAsNumber","parseFloat","valueDate","valueAsDate","_f","maxLengthValue","_g","minLengthValue","inputLength","toString","_h","patternValue","patternMessage","getFieldsValue","validateRef","isFunction","_o","validateError","validationResult","_j","entries","_l","__read","validateFunction","validateResult","getPath","pathWithIndex","getInnerPath","flat","Infinity","fieldValues","fieldName","watchFields","inputValue","isSingleField","add","forEach","isOnBlur","isOnChange","isOnTouch","isTouched","isReValidateOnBlur","isReValidateOnChange","isBlurEvent","isSubmitted","substring","indexOf","isMatchFieldArrayName","searchName","names","some","cloneObject","copy","getTime","mode","isOnSubmit","isOnAll","isWindowUndefined","window","isWeb","document","isProxyEnabled","Proxy","FormContext","React.createContext","displayName","useFormContext","React.useContext","d","performance","now","c","r","Math","random","removeAtIndexes","removeAt","from","to","splice","indexA","indexB","temp","prepend","insert","fill","mapValueToBoolean","mapIds","keyName","generateId","rules","as","render","control","onFocus","rest","methods","defaultValuesRef","setValue","register","unregister","trigger","touched","updateFormState","readFormStateRef","fieldArrayNamesRef","isNotFieldArray","isNameInFieldArray","getInitialValue","React.useState","setInputStateValue","valueRef","React.useRef","onFocusRef","shouldValidate","skipValidation","commonTask","event","getInputValue","registerField","React.useCallback","defineProperty","focus","React.useEffect","onBlur","onChange","_i","shouldDirty","props","React.isValidElement","React.cloneElement","React.createElement","children","Provider","__assign","focusIndexRef","isWatchAllRef","resetFieldArrayFunctionRef","removeFieldEventListener","formStateRef","watchFieldsRef","validFieldsRef","fieldsWithValidationRef","fieldArrayDefaultValuesRef","validateResolver","renderWatchedInputs","getValues","shouldUnregister","fieldArrayParentName","getFieldArrayParentName","memoizedDefaultValues","setFields","allFields","getCurrentFieldsValues","setFieldAndValidState","fieldsValues","getIsDirtyState","flagOrFields","isDirty","dirtyFields","resetFields","cleanup","updateDirtyFieldsWithDefaultValues","updatedFieldArrayValues","defaultFieldArrayValues","updateDirtyFieldsBaseOnDefaultValues","base","innerKey","batchStateUpdate","method","args","updatedFieldValues","shouldSet","shouldUpdateValid","argA","argB","argC","argD","reset","defaultValues","pop","shouldRenderUseWatch","resetFunctions","fieldArrayNames","delete","swap","swapArrayAt","move","moveArrayAt","shouldFocus","emptyArray","fillEmptyArray","prependAt","fillBooleanArray","append","updateFormValues","remove","removeArrayAt","insertAt","reValidateMode","resolver","context","shouldFocusError","criteriaMode","Set","useWatchFieldsRef","useWatchRenderFunctionsRef","defaultValuesAtRenderRef","isUnMount","handleChangeRef","contextRef","resolverRef","modeRef","modeChecker","isValidateAllFieldCriteria","submitCount","isSubmitting","isSubmitSuccessful","formState","setFormState","observerRef","_k","state","shouldRenderBaseOnError","shouldRender","shouldReRender","validFields","fieldsWithValidation","previousError","isErrorStateChanged","setFieldValue","rawValue","radioRef","selectRef","selected","checkboxRef","isFormDirty","updateAndGetDirtyState","isFieldDirty","isDirtyFieldExist","previousIsDirty","isChanged","executeValidation","skipReRender","validateField","executeSchemaOrResolverValidation","previousFormIsValid","isInputsValid","every","Promise","all","setInternalValues","setInternalValue","config","has","setFieldArrayDirtyFields","parentName","isFieldWatched","match","found","size","setFieldArrayDefaultValues","payload","payload_1","getFieldsValues","shouldSkipValidation","forceDelete","handleChange","fieldRef","options_1","removeAllEventListeners","findRemovedFieldAndRemoveListener","removeFieldEventListenerAndRef","watchInternal","fieldNames","watchId","combinedDefaultValues","assignWatchFields","registerFieldRef","validateOptions","fieldRefAndValidationOptions","isRadioOrCheckboxFunction","isFieldArray","compareRef","currentRef","isEmptyDefaultValue","isEmptyUnmountFields","then","shouldAttachChangeEvent","addEventListener","attachEventListeners","handleSubmit","onValid","onInvalid","e","preventDefault","persist","fieldErrors","name_2","fieldError","focusOnErrorField","observer","MutationObserver","observe","childList","subtree","onDomRemove","disconnect","commonProps","refOrValidationOptions","watch","prop","omitResetState","inputRef","closest","resetFieldArray","resetRefs","clearErrors","inputName","setError","idRef","defaultValueRef","updateWatchValue","id","watchFieldsHookRender","watchFieldsHook"],"mappings":"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"}